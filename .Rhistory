#bio
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kjbark3r/Documents/NSERP/Databases/Sapphire_Veg_Database_2016-06-28.accdb")
bio <-  sqlQuery(channel, paste("select * from Classification"))
colnames(bio) <- c("VisitDate", "PlotID", "PlotM", "Species", "Total", "Live", "Senesced")
bioplots <- as.data.frame(unique(bio$PlotID))
colnames(bioplots) <- "PlotID"
bioplots
##########################################################
#### seasonal kdes - for liz - R > ArcMap? ####
################## KJB  July 2016  #######################
##########################################################
## WD
wd_workcomp <- "C:\\Users\\kristin.barker\\Documents\\GitHub\\KDEtest"
wd_laptop <- "C:\\Users\\kjbark3r\\Documents\\GitHub\\KDEtest"
if (file.exists(wd_workcomp)) {
setwd(wd_workcomp)
} else {
if(file.exists(wd_laptop)) {
setwd(wd_laptop)
} else {
cat("Are you SURE you got that file path right?\n")
}
}
rm(wd_workcomp, wd_laptop)
##LOAD PACKAGES
# may not need all of these
library(sp) #for kernel centroid estimate
library(adehabitatHR) #for kernel centroid estimate
library(raster)
library(rgdal)
library(gsubfn)
library(maptools) #for writeSpatialShape
library(dplyr) #for between()
#DEFINE PROJECTIONS
latlong = CRS("+init=epsg:4326")
stateplane = CRS("+init=epsg:2818")
##COLLAR DATA
elk <- read.csv("collardata-locsonly-equalsampling.csv", as.is = TRUE, header = TRUE)
elk$Date <- as.Date(elk$Date, "%Y-%m-%d")
# add season
elk$Month <- as.numeric(format(as.POSIXlt(elk$Date), "%m"))
elk$Season <- ifelse(between(elk$Month, 03, 05), "Spring",
ifelse(between(elk$Month, 06, 08), "Summer",
ifelse(between(elk$Month, 09, 11), "Fall", "Winter")
)
)
elk <- subset(elk, select = -Month)
##SEASONAL KDES BY SEX
# winter
winter <- subset(elk, elk$Season == "Winter")
# male
winterm <- subset(winter, winter$Sex == "Male")
xy <- data.frame("x"=winterm$Long,"y"=winterm$Lat)
winterm.ll <- SpatialPointsDataFrame(xy, winterm, proj4string = latlong)
winterm.sp <- spTransform(winterm.ll,stateplane)
winterm.kde <- kernelUD(winterm.sp, h="href", grid = 5000)
winterm.raster <- raster(winterm.kud)
winterm.raster <- raster(winterm.kde)
writeRaster(winterm.raster, paste("winterKDE-Male"), format="GTiff", overwrite=TRUE)
?kernelUD
image(winter.kde)
image(winterm.kde)
##########################################################
#### seasonal kdes - for liz - R > ArcMap? ####
################## KJB  July 2016  #######################
##########################################################
## WD
wd_workcomp <- "C:\\Users\\kristin.barker\\Documents\\GitHub\\KDEtest"
wd_laptop <- "C:\\Users\\kjbark3r\\Documents\\GitHub\\KDEtest"
if (file.exists(wd_workcomp)) {
setwd(wd_workcomp)
} else {
if(file.exists(wd_laptop)) {
setwd(wd_laptop)
} else {
cat("Are you SURE you got that file path right?\n")
}
}
rm(wd_workcomp, wd_laptop)
##LOAD PACKAGES
# may not need all of these
library(sp) #for kernel centroid estimate
library(adehabitatHR) #for kernel centroid estimate
library(raster)
library(rgdal)
library(gsubfn)
library(maptools) #for writeSpatialShape
library(dplyr) #for between()
#DEFINE PROJECTIONS
latlong = CRS("+init=epsg:4326")
stateplane = CRS("+init=epsg:2818")
##COLLAR DATA
elk <- read.csv("collardata-locsonly-equalsampling.csv", as.is = TRUE, header = TRUE)
elk$Date <- as.Date(elk$Date, "%Y-%m-%d")
# add season
elk$Month <- as.numeric(format(as.POSIXlt(elk$Date), "%m"))
elk$Season <- ifelse(between(elk$Month, 03, 05), "Spring",
ifelse(between(elk$Month, 06, 08), "Summer",
ifelse(between(elk$Month, 09, 11), "Fall", "Winter")
)
)
elk <- subset(elk, select = -Month)
##SEASONAL KDES BY SEX
# winter
win <- subset(elk, elk$Season == "Winter")
# male
win.m <- subset(winter, winter$Sex == "Male")
win.m <- subset(win, win$Sex == "Male")
xy <- data.frame("x"=win.m$Long,"y"=win.m$Lat)
win.m.ll <- SpatialPointsDataFrame(xy, win.m, proj4string = latlong)
win.m.sp <- spTransform(win.m.ll,stateplane)
win.m.kde <- kernelUD(win.m.sp, h="href", grid = 5000)
win.m.vol <- getverticeshr(win.m.kde, percent = 95, ida = NULL, unin = "m", unout = "km")
writeOGR(win.m.vol, ".", paste("winterKDE-Male", sep=""), driver="ESRI Shapefile", overwrite_layer=TRUE)
#writeRaster(winterm.raster, paste("winterKDE-Male95"), format="GTiff", overwrite=TRUE)
writeOGR(win.m.vol, ".", paste("winterKDE-Male2", sep=""), driver="ESRI Shapefile", overwrite_layer=TRUE)
# female
win.f <- subset(win, win$Sex == "Female")
xy <- data.frame("x"=win.f$Long,"y"=win.f$Lat)
win.f.ll <- SpatialPointsDataFrame(xy, win.f, proj4string = latlong)
win.f.sp <- spTransform(win.f.ll,stateplane)
##########################################################
#### seasonal kdes - for liz - R > ArcMap? ####
################## KJB  July 2016  #######################
##########################################################
## WD
wd_workcomp <- "C:\\Users\\kristin.barker\\Documents\\GitHub\\KDEtest"
wd_laptop <- "C:\\Users\\kjbark3r\\Documents\\GitHub\\KDEtest"
if (file.exists(wd_workcomp)) {
setwd(wd_workcomp)
} else {
if(file.exists(wd_laptop)) {
setwd(wd_laptop)
} else {
cat("Are you SURE you got that file path right?\n")
}
}
rm(wd_workcomp, wd_laptop)
##LOAD PACKAGES
# may not need all of these
library(sp) #for kernel centroid estimate
library(adehabitatHR) #for kernel centroid estimate
library(raster)
library(rgdal)
library(gsubfn)
library(maptools) #for writeSpatialShape
library(dplyr) #for between()
#DEFINE PROJECTIONS
latlong = CRS("+init=epsg:4326")
stateplane = CRS("+init=epsg:2818")
##COLLAR DATA
elk <- read.csv("collardata-locsonly-equalsampling.csv", as.is = TRUE, header = TRUE)
elk$Date <- as.Date(elk$Date, "%Y-%m-%d")
# add season
elk$Month <- as.numeric(format(as.POSIXlt(elk$Date), "%m"))
elk$Season <- ifelse(between(elk$Month, 03, 05), "Spring",
ifelse(between(elk$Month, 06, 08), "Summer",
ifelse(between(elk$Month, 09, 11), "Fall", "Winter")
)
)
elk <- subset(elk, select = -Month)
##SEASONAL KDES BY SEX
# winter
win <- subset(elk, elk$Season == "Winter")
# male
win.m <- subset(win, win$Sex == "Male")
xy <- data.frame("x"=win.m$Long,"y"=win.m$Lat)
ll <- SpatialPointsDataFrame(xy, win.m, proj4string = latlong)
sp <- spTransform(ll,stateplane)
kde <- kernelUD(sp, h="href", grid = 5000)
raster <- raster(kde)
writeRaster(raster, paste("winKDE-male"), format="GTiff", overwrite=TRUE)
# female
win.f <- subset(win, win$Sex == "Female")
xy <- data.frame("x"=win.f$Long,"y"=win.f$Lat)
ll <- SpatialPointsDataFrame(xy, win.f, proj4string = latlong)
sp <- spTransform(ll,stateplane)
kde <- kernelUD(sp, h="href", grid = 5000)
raster <- raster(kde)
writeRaster(raster, paste("winKDE-female"), format="GTiff", overwrite=TRUE)
# spring
spr <- subset(elk, elk$Season == "Spring")
# male
spr.m <- subset(spr, spr$Sex == "Male")
xy <- data.frame("x"=spr.m$Long,"y"=spr.m$Lat)
ll <- SpatialPointsDataFrame(xy, spr.m, proj4string = latlong)
sp <- spTransform(ll,stateplane)
kde <- kernelUD(sp, h="href", grid = 5000)
raster <- raster(kde)
writeRaster(raster, paste("sprKDE-male"), format="GTiff", overwrite=TRUE)
# female
spr.f <- subset(spr, spr$Sex == "Female")
xy <- data.frame("x"=spr.f$Long,"y"=spr.f$Lat)
ll <- SpatialPointsDataFrame(xy, spr.f, proj4string = latlong)
sp <- spTransform(ll,stateplane)
kde <- kernelUD(sp, h="href", grid = 5000)
raster <- raster(kde)
writeRaster(raster, paste("sprKDE-female"), format="GTiff", overwrite=TRUE)
# summer
sum <- subset(elk, elk$Season == "Summer")
# male
sum.m <- subset(sum, sum$Sex == "Male")
xy <- data.frame("x"=sum.m$Long,"y"=sum.m$Lat)
ll <- SpatialPointsDataFrame(xy, sum.m, proj4string = latlong)
sp <- spTransform(ll,stateplane)
kde <- kernelUD(sp, h="href", grid = 5000)
raster <- raster(kde)
writeRaster(raster, paste("sumKDE-male"), format="GTiff", overwrite=TRUE)
# female
sum.f <- subset(sum, sum$Sex == "Female")
xy <- data.frame("x"=sum.f$Long,"y"=sum.f$Lat)
ll <- SpatialPointsDataFrame(xy, sum.f, proj4string = latlong)
sp <- spTransform(ll,stateplane)
kde <- kernelUD(sp, h="href", grid = 5000)
raster <- raster(kde)
writeRaster(raster, paste("sumKDE-female"), format="GTiff", overwrite=TRUE)
# fall
fall <- subset(elk, elk$Season == "Fall")
# male
fall.m <- subset(fall, fall$Sex == "Male")
xy <- data.frame("x"=fall.m$Long,"y"=fall.m$Lat)
ll <- SpatialPointsDataFrame(xy, fall.m, proj4string = latlong)
sp <- spTransform(ll,stateplane)
kde <- kernelUD(sp, h="href", grid = 5000)
raster <- raster(kde)
writeRaster(raster, paste("fallKDE-male"), format="GTiff", overwrite=TRUE)
# female
fall.f <- subset(fall, fall$Sex == "Female")
xy <- data.frame("x"=fall.f$Long,"y"=fall.f$Lat)
ll <- SpatialPointsDataFrame(xy, fall.f, proj4string = latlong)
sp <- spTransform(ll,stateplane)
kde <- kernelUD(sp, h="href", grid = 5000)
raster <- raster(kde)
writeRaster(raster, paste("fallKDE-female"), format="GTiff", overwrite=TRUE)
image(kde)
##########################################################
#### HERBACEOUS BIOMASS ESTIMATION - NSERP STUDY AREA ####
################## KJB  July 2016  #######################
##########################################################
#### NOTE: MUST USE 32 BIT R TO CONNECT TO ACCESS ####
## WD
wd_workcomp <- "C:\\Users\\kristin.barker\\Documents\\GitHub\\BiomassShrubs"
wd_laptop <- "C:\\Users\\kjbark3r\\Documents\\GitHub\\BiomassShrubs"
if (file.exists(wd_workcomp)) {
setwd(wd_workcomp)
} else {
if(file.exists(wd_laptop)) {
setwd(wd_laptop)
} else {
cat("Are you SURE you got that file path right?\n")
}
}
## PACKAGES
library(RODBC)
library(dplyr)
library(tidyr)
#########
## DATA - READ IN AND SET UP
#Connect to Access phenology database (work computer or laptop)
if (file.exists(wd_workcomp)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kristin.barker/Documents/NSERP/Databases and Mort Reports/SapphireElkProject_VegetationDatabase.accdb")
} else {
if(file.exists(wd_laptop)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kjbark3r/Documents/NSERP/Databases/SapphireElkProject_VegetationDatabase.accdb")
} else {
cat("Are you SURE you got that file path right?\n")
}
}
rm(wd_workcomp, wd_laptop)
# LIFE FORM
spp <- sqlQuery(channel, paste("select PlantCode, LifeForm, NameScientific
from NSERP_SP_list"))
spp <- rename(spp, Species = PlantCode)
spp$LifeForm <- trimws(spp$LifeForm)
# CLASSIFICATION - plus quadrat id, quadrat-visit ID, plot-visit ID, life form, genus
classn <- sqlQuery(channel, paste("select * from Classification"))
colnames(classn) <- c("VisitDate", "PlotID", "PlotM", "Species", "Total", "Live", "Senesced")
classn$Species <- trimws(classn$Species) #remove leading/trailing whitespace
classn <- classn %>%
mutate(Quadrat = paste(PlotID,"-",PlotM, sep="")) %>%
mutate(QuadratVisit = paste(PlotID,".", VisitDate,".",PlotM, sep="")) %>%
mutate(PlotVisit = paste(PlotID, ".", VisitDate, sep="")) %>%
left_join(spp, by = "Species")
classn$Genus <- sapply(strsplit(as.character(classn$NameScientific), " "), "[", 1)
for(i in 1:nrow(classn)) {
classn$LifeForm[i] <- ifelse(grepl(' GRASS| JUNCACEAE |CARE ', classn$Species[i]), "graminoid",
ifelse(grepl('UNK ', classn$Species[i]), "forb", next))
}
getwd()
#Connect to Access phenology database (work computer or laptop)
if (file.exists(wd_workcomp)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kristin.barker/Documents/NSERP/Databases and Mort Reports/SapphireElkProject_VegetationDatabase.accdb")
} else {
if(file.exists(wd_laptop)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kjbark3r/Documents/NSERP/Databases/SapphireElkProject_VegetationDatabase.accdb")
} else {
cat("Are you SURE you got that file path right?\n")
}
}
wd_workcomp <- "C:\\Users\\kristin.barker\\Documents\\GitHub\\BiomassShrubs"
wd_laptop <- "C:\\Users\\kjbark3r\\Documents\\GitHub\\BiomassShrubs"
if (file.exists(wd_workcomp)) {
setwd(wd_workcomp)
} else {
if(file.exists(wd_laptop)) {
setwd(wd_laptop)
} else {
cat("Are you SURE you got that file path right?\n")
}
}
if (file.exists(wd_workcomp)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kristin.barker/Documents/NSERP/Databases and Mort Reports/SapphireElkProject_VegetationDatabase.accdb")
} else {
if(file.exists(wd_laptop)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kjbark3r/Documents/NSERP/Databases/SapphireElkProject_VegetationDatabase.accdb")
} else {
cat("Are you SURE you got that file path right?\n")
}
}
##########################################################
#### HERBACEOUS BIOMASS ESTIMATION - NSERP STUDY AREA ####
################## KJB  July 2016  #######################
##########################################################
#### NOTE: MUST USE 32 BIT R TO CONNECT TO ACCESS ####
## WD
wd_workcomp <- "C:\\Users\\kristin.barker\\Documents\\GitHub\\BiomassShrubs"
wd_laptop <- "C:\\Users\\kjbark3r\\Documents\\GitHub\\BiomassShrubs"
if (file.exists(wd_workcomp)) {
setwd(wd_workcomp)
} else {
if(file.exists(wd_laptop)) {
setwd(wd_laptop)
} else {
cat("Are you SURE you got that file path right?\n")
}
}
## PACKAGES
library(RODBC)
library(dplyr)
library(tidyr)
#########
## DATA - READ IN AND SET UP
#Connect to Access phenology database (work computer or laptop)
if (file.exists(wd_workcomp)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kristin.barker/Documents/NSERP/Databases and Mort Reports/SapphireElkProject_VegetationDatabase.accdb")
} else {
if(file.exists(wd_laptop)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kjbark3r/Documents/NSERP/Databases/SapphireElkProject_VegetationDatabase.accdb")
} else {
cat("Are you SURE you got that file path right?\n")
}
}
rm(wd_workcomp, wd_laptop)
# LIFE FORM
spp <- sqlQuery(channel, paste("select PlantCode, LifeForm, NameScientific
from NSERP_SP_list"))
spp <- rename(spp, Species = PlantCode)
spp$LifeForm <- trimws(spp$LifeForm)
# CLASSIFICATION - plus quadrat id, quadrat-visit ID, plot-visit ID, life form, genus
classn <- sqlQuery(channel, paste("select * from Classification"))
colnames(classn) <- c("VisitDate", "PlotID", "PlotM", "Species", "Total", "Live", "Senesced")
classn$Species <- trimws(classn$Species) #remove leading/trailing whitespace
classn <- classn %>%
mutate(Quadrat = paste(PlotID,"-",PlotM, sep="")) %>%
mutate(QuadratVisit = paste(PlotID,".", VisitDate,".",PlotM, sep="")) %>%
mutate(PlotVisit = paste(PlotID, ".", VisitDate, sep="")) %>%
left_join(spp, by = "Species")
classn$Genus <- sapply(strsplit(as.character(classn$NameScientific), " "), "[", 1)
for(i in 1:nrow(classn)) {
classn$LifeForm[i] <- ifelse(grepl(' GRASS| JUNCACEAE |CARE ', classn$Species[i]), "graminoid",
ifelse(grepl('UNK ', classn$Species[i]), "forb", next))
}
library(RODBC)
library(tidyr)
library("RODBC", lib.loc="~/R/win-library/3.3")
library("tidyr", lib.loc="~/R/win-library/3.3")
#########
## DATA - READ IN AND SET UP
#Connect to Access phenology database (work computer or laptop)
if (file.exists(wd_workcomp)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kristin.barker/Documents/NSERP/Databases and Mort Reports/SapphireElkProject_VegetationDatabase.accdb")
} else {
if(file.exists(wd_laptop)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kjbark3r/Documents/NSERP/Databases/SapphireElkProject_VegetationDatabase.accdb")
} else {
cat("Are you SURE you got that file path right?\n")
}
}
rm(wd_workcomp, wd_laptop)
# LIFE FORM
spp <- sqlQuery(channel, paste("select PlantCode, LifeForm, NameScientific
from NSERP_SP_list"))
spp <- rename(spp, Species = PlantCode)
spp$LifeForm <- trimws(spp$LifeForm)
# CLASSIFICATION - plus quadrat id, quadrat-visit ID, plot-visit ID, life form, genus
classn <- sqlQuery(channel, paste("select * from Classification"))
colnames(classn) <- c("VisitDate", "PlotID", "PlotM", "Species", "Total", "Live", "Senesced")
classn$Species <- trimws(classn$Species) #remove leading/trailing whitespace
classn <- classn %>%
mutate(Quadrat = paste(PlotID,"-",PlotM, sep="")) %>%
mutate(QuadratVisit = paste(PlotID,".", VisitDate,".",PlotM, sep="")) %>%
mutate(PlotVisit = paste(PlotID, ".", VisitDate, sep="")) %>%
left_join(spp, by = "Species")
classn$Genus <- sapply(strsplit(as.character(classn$NameScientific), " "), "[", 1)
for(i in 1:nrow(classn)) {
classn$LifeForm[i] <- ifelse(grepl(' GRASS| JUNCACEAE |CARE ', classn$Species[i]), "graminoid",
ifelse(grepl('UNK ', classn$Species[i]), "forb", next))
}
##########################################################
#### HERBACEOUS BIOMASS ESTIMATION - NSERP STUDY AREA ####
################## KJB  July 2016  #######################
##########################################################
#### NOTE: MUST USE 32 BIT R TO CONNECT TO ACCESS ####
## WD
wd_workcomp <- "C:\\Users\\kristin.barker\\Documents\\GitHub\\BiomassShrubs"
wd_laptop <- "C:\\Users\\kjbark3r\\Documents\\GitHub\\BiomassShrubs"
if (file.exists(wd_workcomp)) {
setwd(wd_workcomp)
} else {
if(file.exists(wd_laptop)) {
setwd(wd_laptop)
} else {
cat("Are you SURE you got that file path right?\n")
}
}
## PACKAGES
library(RODBC)
library(dplyr)
library(tidyr)
#########
## DATA - READ IN AND SET UP
#Connect to Access phenology database (work computer or laptop)
if (file.exists(wd_workcomp)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kristin.barker/Documents/NSERP/Databases and Mort Reports/SapphireElkProject_VegetationDatabase.accdb")
} else {
if(file.exists(wd_laptop)) {
channel <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
dbq=C:/Users/kjbark3r/Documents/NSERP/Databases/SapphireElkProject_VegetationDatabase.accdb")
} else {
cat("Are you SURE you got that file path right?\n")
}
}
rm(wd_workcomp, wd_laptop)
# LIFE FORM
spp <- sqlQuery(channel, paste("select PlantCode, LifeForm, NameScientific
from NSERP_SP_list"))
spp <- rename(spp, Species = PlantCode)
spp$LifeForm <- trimws(spp$LifeForm)
# CLASSIFICATION - plus quadrat id, quadrat-visit ID, plot-visit ID, life form, genus
classn <- sqlQuery(channel, paste("select * from Classification"))
colnames(classn) <- c("VisitDate", "PlotID", "PlotM", "Species", "Total", "Live", "Senesced")
classn$Species <- trimws(classn$Species) #remove leading/trailing whitespace
classn <- classn %>%
mutate(Quadrat = paste(PlotID,"-",PlotM, sep="")) %>%
mutate(QuadratVisit = paste(PlotID,".", VisitDate,".",PlotM, sep="")) %>%
mutate(PlotVisit = paste(PlotID, ".", VisitDate, sep="")) %>%
left_join(spp, by = "Species")
classn$Genus <- sapply(strsplit(as.character(classn$NameScientific), " "), "[", 1)
for(i in 1:nrow(classn)) {
classn$LifeForm[i] <- ifelse(grepl(' GRASS| JUNCACEAE |CARE ', classn$Species[i]), "graminoid",
ifelse(grepl('UNK ', classn$Species[i]), "forb", next))
}
# COVER - creating manually because some recorded numbers are incorrect
####### PROB NEED IFELSE - IF SHRUBS, CALCULATE BASED ON GAP ##########
####### OR DO SHRUBS SEPARTELY AND JOIN BACK TOGETHER ##########
cover <- classn %>%
subset(!PlotM == 10 & !PlotM == 30) %>% #remove non-clipplots
group_by(QuadratVisit, LifeForm) %>%
summarise(Wt = sum(Total)) %>%
spread(LifeForm, Wt) %>%
rename(ForbCov = forb, GrassCov = graminoid)
cover$ForbCov[is.na(cover$ForbCov)] <- 0; cover$GrassCov[is.na(cover$GrassCov)] <- 0
# CLIP PLOTS - plus quadrat ID, quadrat-visit ID
clip <- sqlQuery(channel, paste("select * from ClipPlots"))
colnames(clip) <- c("VisitDate", "PlotID", "PlotM", "LifeForm", "EmptyBag",
"Total", "Live", "Senesced", "WetWt", "DryWt")
clip <- clip %>%
mutate(QuadratVisit = paste(PlotID,".", VisitDate,".",PlotM, sep="")) %>%
mutate(PlotVisit = paste(PlotID, ".", VisitDate, sep=""))
# FORAGE PLANTS
foragespp <- read.csv("foragespecies.csv")
# FORAGE PLANTS
foragespp <- read.csv("foragespecies.csv")
View(classn)
tree <- classn(classn$VisitDate < "2015-01-01")
tree <- classn[classn$VisitDate < "2015-01-01",]
data14 <- classn[classn$VisitDate >= "2015-01-01",]
data14tree <- data14 %>% subset(LifeForm == "tree")
rm(tree)
data15 <- classn[classn$VisitDate < "2015-01-01",]
data15tree <- data15 %>% subset(LifeForm == "tree")
rm(data14, data14tree, data15, data15tree)
unique(foragespp$LifeForm)
measure <- sqlQuery(channel, paste("select * from MeasurePlants"))
(unique(measure$Species))
shrub.spp <- write.csv(unique(measure$Species))
a <- as.data.frame(unique(measure$Species))
View(a)
chrvis <- measure[measure$Species =="CHRVIS",]
View(chrvis)
